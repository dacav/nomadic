#!/usr/bin/env python
'''
\x1b[1mUsage:\x1b[0m

    {0} <spec1> <f1> [<f2> ... <fN>] <spec2> <f1> [<f2> ... <fM>]

    Where specification is something like: "1 hop:1:batman,olsr,static"
    meaning that the experiment runs on a 1-hop configuration, and that
    the files <f1>, <f2> and <f3> are respectively ping outputs
    of experiments with batman, olsr and static routes.

'''

from collections import deque
import sys
from pingparser import PingParser
import utils

from itertools import izip as zip, \
                      imap as map, \
                      izip_longest as zipl, \
                      count, \
                      islice

import matplotlib.pyplot as plt
import os.path

def plot_latencies (args):

    labels = deque()
    data = deque()
    positions = deque()
    block = deque()
    averages = deque()

    pos = 0
    for label, thresh, pairs in utils.cmdline_parse(args):
        block.append((pos, label))
        for subl, fnam in pairs:
            f = open(fnam, 'rt')
            parse = list(utils.cut_outlayers(PingParser(f), thresh))
            f.close()
            averages.append(utils.average(parse))
            labels.append(subl)
            data.append(parse)
            positions.append(pos)
            pos += 1
        pos += 1

    plt.plot(positions, averages, 'or')
    plt.boxplot(data, sym='', positions=positions, whis=sys.maxint)
    plt.xticks(positions, labels, rotation=45)

    ypos = plt.ylim()[1]
    for xpos, lab in block:
        plt.text(xpos, 3.5, lab)

def main (argv=None):
    if not argv: argv = sys.argv

    progname = os.path.basename(argv.pop(0))
    if len(argv) < 1:
        sys.stderr.write(__doc__.format(progname))
        return 1

    plot_latencies(argv)
    plt.ion()
    plt.draw()
    
    from IPython.Shell import IPShellEmbed
    IPShellEmbed([])()

    return 0

if __name__ == '__main__':
    sys.exit(main())
