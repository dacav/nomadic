#!/usr/bin/env python
'''
\x1b[1mUsage:\x1b[0m
    {0} -t [0|1] <mesh log> <netperf log>
'''

#\x1b[1mNote:\x1b[0m

from itertools import izip as zip, \
                      count
import sys
import batparser
import olsrparser
import netperfparser
import utils

import matplotlib.pyplot as plt

class Flow:

    identifier = {'10.0.0.66' : (20, 'g-'), '10.0.0.68' : (20, 'b-')}

    def __init__ (self):
        self.time = 0

    def draw (self, t0, t1, val, glyph):
        plt.plot([t0, t1], [val, val], glyph)

    def update (self, to_time, gateway):
        if gateway in Flow.identifier:
            self.draw(self.time, to_time, *Flow.identifier[gateway])
        self.time = to_time

def plot_convergence (meshprot, perf):
    f = Flow()
    for t, gw in meshprot:
        f.update(t, gw)

    time, val = (list(x) for x in zip(*perf))
    plt.plot(time, val, "r-")
    plt.axis([0, 70, 0, 21])
    plt.show()

def main (argv=None):
    import getopt

    batman_mesh = None

    opts, args = getopt.getopt(sys.argv[1:], "t:")
    for (o, v) in opts:
        if o == "-t":
            if int(v) == 0: batman_mesh = True
            else: batman_mesh = False

    if batman_mesh == None:
        print("Specify type of mesh -t 0/1")
        return 1

    if len(args) < 2:
        print("Specify log files")
        return 1

    mesh_data = None
    if batman_mesh: 
        print ("Using batman mesh")
        parser = batparser.BatParser(args[0], 70)
        mesh_data = parser.iter_nexthop_ts("10.0.0.67")
    else: 
        print("Using olsr mesh")
        parser = olsrparser.OlsrParser(args[0])
        mesh_data = parser.parse("10.0.0.67")
        
    

    perf_data = netperfparser.NetperfParser(args[1], netperfparser.BY_TRANSACTIONS)
    plot_convergence(mesh_data, perf_data)
    return 0

if __name__ == '__main__':
    sys.exit(main())

