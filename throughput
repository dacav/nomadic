#!/usr/bin/env python
'''
\x1b[1mUsage:\x1b[0m
    {0} <what> <t0> <t1> ... <tn>

    - <what> can be: globavg, cmpavgs

    - <t0>, <t1>, ... <tn> are files created by redirecting iperf's
      standard output. You must provide at least one iperf file.

\x1b[1mInformation:\x1b[0m
    Builds a gnuplot-compatible list of throughputs basing on the input
    files.

\x1b[1mNote:\x1b[0m
    The program writes on stdout the plotting request for gnuplot. Try to
    launch like this:
        {0} <params> | gnuplot -persist

'''

import sys
import itertools
import netperfparser
import utils
import matplotlib.pyplot as plt

def draw_line (x0, y0, x1, y1):
    plt.plot([x0, x1], [y0, y1])

def plot_globavg (*files):
    sumval = 0
    count = 0
    for f in files:
        npp = netperfparser.NetperfParser(f)
        xs, ys = itertools.izip(*npp)
        plt.plot(xs, ys, 'r.')
        sumval += npp.thr_total
        count += 1

    avg = float(sumval) / count
    draw_line(0, avg, xs[-1], avg)
    plt.show()

def plot_cmpavgs (*files):
    sumval = 0
    count = 0
    for fn in files:
        f = open(fn, 'rt')
        npp = netperfparser.NetperfParser(f)

        # this both runs the algorithm and retrieves the last position in
        # interval
        for interval, speed in npp: pass
        f.close()
        sumval += npp.thr_total
        count += 1

    avg = float(sumval) / count
    draw_line(0, avg, interval, avg)

def main (argv=None):
    if not argv: argv = sys.argv

    progname = argv.pop(0)
    if len(argv) < 2:
        sys.stderr.write(__doc__.format(progname))
        return 1

    mode = argv.pop(0)
    if mode == 'globavg':
        files = itertools.imap(lambda fn : open(fn, 'rt'), argv)
        plot_globavg(*files)
    elif mode == 'cmpavgs':
        plot_cmpavgs(*itertools.ifilter(lambda fn : 'batman' in fn, argv))
        plot_cmpavgs(*itertools.ifilter(lambda fn : 'olsr' in fn, argv))
        plot_cmpavgs(*itertools.ifilter(lambda fn : 'static' in fn, argv))
        plt.legend(('batman', 'olsr', 'static'))
        plt.axis([0, 60, 0, 10])
        plt.show()
    else:
        sys.stderr.write(__doc__.format(progname))
        return 2
 
    for f in files:
        f.close()

    return 0

if __name__ == '__main__':
    sys.exit(main())

